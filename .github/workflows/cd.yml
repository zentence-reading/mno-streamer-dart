name: Dart CD

on:
  push:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read # Needed to checkout the code
  pages: write # Needed to deploy to GitHub Pages
  id-token: write # Needed for OIDC token authentication by the deploy action

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# Do NOT cancel in-progress runs as we want production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Dart SDK
        uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: dart pub get

      - name: Generate documentation
        run: dart doc . # Output defaults to ./doc/api

      - name: Setup Pages
        # This step helps ensure links in your docs work correctly if deployed
        # to a subpath like <username>.github.io/<repository-name>/
        # It creates a .nojekyll file and potentially adjusts base tags.
        uses: actions/configure-pages@v5

      - name: Upload artifact
        # This bundles the generated docs into an artifact named 'github-pages'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./doc/api/

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Sets the deployment URL in the GitHub UI
    runs-on: ubuntu-latest
    needs: build # This job only runs if the 'build' job succeeds
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # This action automatically retrieves the artifact uploaded by
        # actions/upload-pages-artifact and deploys it.